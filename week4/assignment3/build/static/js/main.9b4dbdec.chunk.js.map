{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","isToggleOn","dispaly","handleClick","bind","toggleClass","activeIndex","this","setState","prevState","display","index","e","className","id","onClick","class","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","innerHTML","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOA+GeA,G,wDArGX,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAY,EACZC,QAAS,SAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAEnB,EAAKC,YAAa,EAAKA,YAAYD,KAAjB,gBAClB,EAAKJ,MAAQ,CACXM,YAAa,GAVE,E,0DAgBjBC,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BR,YAAaQ,EAAUR,WACvBS,QAASD,EAAUR,WAAa,OAAQ,c,kCAIhCU,EAAOC,GACjBL,KAAKC,SAAS,CAAEF,YAAaK,M,+BAM/B,OAEE,yBAAKE,UAAU,OACX,gCACC,6BACG,0BAAMA,UAAU,QAAhB,wBACA,yBAAKA,UAAU,QACf,0BAAMA,UAAU,SAAhB,UACA,0BAAMA,UAAU,SAAhB,UACA,0BAAMA,UAAU,SAAhB,UACA,0BAAMA,UAAU,SAAhB,WAIA,yBAAKA,UAAW,UAChB,0BAAMC,GAAI,WACN,mCAAGD,UAAU,eAAb,YAAqC,oBAM3C,wBAAIC,GAAI,YACA,0CACA,0CACA,0CACA,4CAMZ,0BAAMD,UAAU,YAEd,6BAASA,UAAU,mBACf,wBAAIC,GAAK,SAAUC,QAASR,KAAKR,MAAMI,aAAvC,oBAGJ,6BAASa,MAAM,eACb,yBAAKA,MAAM,gBACX,8CAEA,yBAAKA,MAAM,QACX,yBAAKA,MAAM,cAAX,iBACA,yBAAKA,MAAM,cAAX,iBACA,yBAAKA,MAAM,cAAX,iBACA,yBAAKA,MAAM,cAAX,mBAKF,4BAAQF,GAAI,aAAaC,QAASR,KAAKJ,aAAvC,KAAsDI,KAAKP,MAAMC,WAAa,kBAA9E,KAEA,6BAASe,MAAO,eACd,yBAAKF,GAAK,YAAaG,MAAO,CAACP,QAASH,KAAKP,MAAMU,UACnD,yBAAKM,MAAM,QACX,yBAAKA,MAAM,cAAX,iBACA,yBAAKA,MAAM,cAAX,iBACA,yBAAKA,MAAM,cAAX,iBACA,yBAAKA,MAAM,cAAX,0B,GA1FME,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCSNC,IAASC,OACP,6BACE,kBAAC,EAAD,CAAKvB,YAhBU,WACjBwB,SAASC,eAAe,UAAUC,UAAU,uBAgB1C,yBAAKf,GAAG,YAGVa,SAASC,eAAe,SDkGpB,kBAAmBE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9b4dbdec.chunk.js","sourcesContent":["import React from 'react';\n// import React,{ Component } from 'react';\nimport './App.css';\n// import {connect} from 'react-redux'\n\n\n\n\nclass App extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        isToggleOn: true,\n        dispaly: 'block'\n      };\n      this.handleClick = this.handleClick.bind(this);\n\n      this.toggleClass= this.toggleClass.bind(this);     //for menu bar\n      this.state = {\n        activeIndex: 0\n      }\n\n    }\n\n    handleClick(){\n      this.setState(prevState => ({\n        isToggleOn: !prevState.isToggleOn,\n        display: prevState.isToggleOn ? 'none': 'block'\n      }));\n    }\n  \n    toggleClass(index, e) {         //for menu bar\n      this.setState({ activeIndex: index });\n  };\n    \n\n\n  render () {\n    return (\n\n      <div className=\"App\">\n          <header>\n           <nav>\n              <span className=\"logo\">Website Title / Logo</span>\n              <div className=\"item\">\n              <span className=\"item1\">Item 1</span>\n              <span className=\"item2\">Item 2</span>\n              <span className=\"item3\">Item 3</span>\n              <span className=\"item4\">Item 4</span>\n              </div>\n              \n\n              <div className =\"mobile\">\n              <span id =\"menubar\" >\n                  <i className=\"fas fa-bars\" className=\"fas fa-times\"></i>\n\n              </span> \n              </div>\n            </nav> \n            \n            <ul id =\"menulist\" >\n                    <li >MOB Item 1</li>\n                    <li >MOB Item 2</li>\n                    <li >MOB Item 3</li>\n                    <li >MOB Item 4</li>\n                </ul>\n                \n          </header>\n\n\n        <main className=\"App-main\">\n\n          <section className=\"welcome_message\">\n              <h1 id = \"h1text\"  onClick={this.props.handleClick}>Welcome Message</h1>\n          </section>\n        \n          <section class=\"content_box\">\n            <div class=\"sectiontitle\">\n            <h3>Section Title</h3>\n            </div>\n            <div class=\"box1\">\n            <div class=\"contentbox\">Content Box 1</div>\n            <div class=\"contentbox\">Content Box 2</div>\n            <div class=\"contentbox\">Content Box 3</div>\n            <div class=\"contentbox\">Content Box 4</div>\n              \n            </div>\n          </section>\n            \n          <button id =\"toggleList\" onClick={this.handleClick}> {this.state.isToggleOn ? 'Call to Action' : 'Call to Action'} </button>\n            \n          <section class =\"content_box\">\n            <div id = \"togglebox\"  style={{display: this.state.display}}>\n            <div class=\"box2\">\n            <div class=\"contentbox\">Content Box 1</div>\n            <div class=\"contentbox\">Content Box 2</div>\n            <div class=\"contentbox\">Content Box 3</div>\n            <div class=\"contentbox\">Content Box 4</div>\n            </div>\n            </div>\n          </section>\n            \n            \n        </main>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\n// Request 1: Click to Change Text.\n\nconst printMessage=()=>{\n  document.getElementById('h1text').innerHTML=\"Have a Good Time!\";\n}\n\n\n// Request 2: Click to Show/Close Menu.\n\n\n\n\n\n\n//index印出來\n\nReactDOM.render(\n  <div>\n    <App handleClick={printMessage}/>\n    <div id=\"h1text\"></div>\n\n  </div>,\n  document.getElementById('root')\n);\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}